extends ../layout
block head
  include ../datatables_css
  link(rel='stylesheet', href='//cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.css')

block content
  .container
    .page-header
      h1 Current Event Status
    .container(id="silencemenu")
      .dropdown 
        a(href='#', id="dLabel", class="dropdown-toggle" data-toggle='dropdown').dropdown-toggle Unsilenced
         b(class='caret')
        ul.dropdown-menu(role='menu', aria-labelledby='dropwdownMenu1')
          li
            a(href='#', tabindex='-1') Silenced
          li 
            a(href='#', tabindex='-1') Unsilenced
          li 
            a(href='#', tabindex='-1') All
     .container(id="refreshmenu")
       .dropdown
         a(href='#', id="dRefresh", class="dropdown-toggle" data-toggle="dropdown").dropdown-toggle Refresh every 30 seconds
           b(class='caret')
         ul.dropdown-menu(role='menu', aria-labelledby='dropdownMenu2')
           li
             a(href='#', tabindex='-1') 15
           li
             a(href='#', tabindex='-1') 30
           li
             a(href='#', tabindex='-1') 60
           li
             a(href='#', tabindex='-1') 120
    .container
      table(id='table_events').table.table-condensed.table-hover
        thead
          tr
            th Severity
            th Issued
            th Client
            th Check
            th Flapping
            th Count
            th.visible-lg Output
        tbody
block footer
  include ../datatables_js
  script(src='//cdnjs.cloudflare.com/ajax/libs/bootbox.js/4.1.0/bootbox.min.js')
  script(src='//cdnjs.cloudflare.com/ajax/libs/prettify/r298/prettify.min.js')
  script(src='/javascripts/sensu-helper.js')
  script(type='text/javascript').
    $.fn.dataTableExt.oApi.fnReloadAjax = function ( oSettings, sNewSource, fnCallback, bStandingRedraw )
    {
        // DataTables 1.10 compatibility - if 1.10 then versionCheck exists.
        // 1.10s API has ajax reloading built in, so we use those abilities
        // directly.
        if ( $.fn.dataTable.versionCheck ) {
            var api = new $.fn.dataTable.Api( oSettings );
  
            if ( sNewSource ) {
              api.ajax.url( sNewSource ).load( fnCallback, !bStandingRedraw );
            }
            else {
              api.ajax.reload( fnCallback, !bStandingRedraw );
            }
            return;
        }
 
        if ( sNewSource !== undefined && sNewSource !== null ) {
          oSettings.sAjaxSource = sNewSource;
        }
 
        // Server-side processing should just call fnDraw
        if ( oSettings.oFeatures.bServerSide ) {
            this.fnDraw();
            return;
        }
 
        this.oApi._fnProcessingDisplay( oSettings, true );
        var that = this;
        var iStart = oSettings._iDisplayStart;
        var aData = [];
 
        this.oApi._fnServerParams( oSettings, aData );
 
        oSettings.fnServerData.call( oSettings.oInstance, oSettings.sAjaxSource, aData, function(json) {
            /* Clear the old information from the table */
            that.oApi._fnClearTable( oSettings );
 
            /* Got the data - add it to the table */
            var aData =  (oSettings.sAjaxDataProp !== "") ?
              that.oApi._fnGetObjectDataFn( oSettings.sAjaxDataProp )( json ) : json;
 
            for ( var i=0 ; i<aData.length ; i++ )
            {
                that.oApi._fnAddData( oSettings, aData[i] );
            }
         
              oSettings.aiDisplay = oSettings.aiDisplayMaster.slice();
 
           that.fnDraw();
 
            if ( bStandingRedraw === true )
            {
                oSettings._iDisplayStart = iStart;
                that.oApi._fnCalculateEnd( oSettings );
                that.fnDraw( false );
            }
 
            that.oApi._fnProcessingDisplay( oSettings, false );
 
            /* Callback user function - for event handlers etc */
           if ( typeof fnCallback == 'function' && fnCallback !== null )
            {
                fnCallback( oSettings );
            }
        }, oSettings );
    };
    var oTable;
    $(document).ready(function() {
      oTable = $('#table_events').dataTable( {
        "fnRowCallback": function( nRow, aData, iDisplayIndex, iDisplayIndedFull ) {
          jQuery('td:eq(0)', nRow).parent('tr').addClass('datatable-row');
          switch (aData['status']) {
            case 2:
              jQuery('td:eq(0)', nRow).parent('tr').addClass('danger');
              break;
            case 1:
              jQuery('td:eq(0)', nRow).parent('tr').addClass('warning');
              break;
            case 0:
              jQuery('td:eq(0)', nRow).parent('tr').addClass('success');
              break;
            default:
              jQuery('td:eq(0)', nRow).parent('tr').addClass('active');
              break;
          }
        },
        "sDom": "<'row'<'span6'l><'span6'f>r>t<'row'<'span6'i><'span6'p>>",
        "sPaginationType": "bootstrap",
        "sAjaxSource": '/api/v1/sensu/events/filtered',
        "iDisplayLength": 10,
        "bStateSave": true,
        "bDeferRender": true,
        "bSortClasses": false,
        "aoColumns": [
          { 
            "mData": "status",
            "sWidth": "50px",
            "mRender": function (status) {
              switch(status) {
                case 2:
                  return "Critical"
                  break;
                case 1:
                  return "Warning"
                  break;
                case 0:
                  return "OK"
                  break;
                default: 
                  return "Unknown"
                  break;
              }
            },
          }, {
            "mData": "issued",
            "sWidth": "80px"
          }, {
            "mData": "client",
            "sWidth": "140px",
            "mRender": function (client, type, row) {
              return renderButton(row['silenced'], row['silence_stash'], client, 'false') + '<a href="/ubersmith/devices/deviceid/'+row['dev'] + '">' + client.replace('#{config.mgmtDomain}', '') + '</a>';
            }
          }, {
            "mData": "check",
            "mData": "client",
            "sWidth": "220px",
            "mRender": function(client, type, row) {
              return renderButton(row['silenced'], row['silence_stash'], row['client'], row['check']) + row['check'];
            },
          }, {
            "mData": "flapping",
            "sWidth": "40px"
          }, {
            "mData": "occurrences",
            "sWidth": "40px"
          }, {
            "mData": "output",
            "mRender": function (output, type, row) {
              var dispOutput = output.slice(0,75).replace(/["']/g, "");
              var txtBoxText = encodeURI(JSON.stringify(row, null, 2));
              return "<a onclick=\"displayEventDetails('" + txtBoxText + "');\">" + dispOutput + "</a>";

            }
          }],
        "aaSorting": [[1,'desc']],
        "oLanguage": {
          "sLengthMenu": "_MENU_ records per page"
        }
      });
      var show = 'Unsilenced';
      $.fn.dataTableExt.afnFiltering.push(
        //Filter by dropdown selection on table draw
        function( oSettings, aData, iDataIndex) {
          var row = oSettings.aoData[iDataIndex]._aData
          , silenced = row.silenced;

          if(show === 'All') {
            return true;
          } else if (show === 'Unsilenced') {
            return (silenced === 0);
          } else if (show === 'Silenced') {
            return (silenced === 1);
          } else {
            return true;
          }
      });
      $("#silencemenu .dropdown .dropdown-menu li a").click(function() {
        //Callback for dropdown, set show variable, change name, and redraw the table.
        show = $(this).text();
        $('#dLabel').html(show + '<span class="caret"</span>');
        oTable.fnDraw();
      });
    });
    var refreshInterval = 30000;
    var intervalId = setInterval(function() {
      oTable.fnReloadAjax('/api/v1/sensu/events/filtered');
    }, refreshInterval);
    $("#refreshmenu .dropdown .dropdown-menu li a").click(function() {
      var newRefreshInterval = parseInt($(this).text());
      $('#dRefresh').html('Refresh every ' + newRefreshInterval + ' seconds<span class="caret"</span>');
      clearInterval(intervalId);
      refreshInterval = newRefreshInterval * 1000;
      intervalId = setInterval(function() {
        oTable.fnReloadAjax('/api/v1/sensu/events/filtered');
      }, refreshInterval);
    });

